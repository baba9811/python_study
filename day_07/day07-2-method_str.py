"""
파일명 : day07-02-method_str
개요 : 문자열 메소드
page : 165 ~ 173
"""

'''
Python은 문자열(str)을 처리하기 위해 많은 메소드를 제공해줌.
문자열 메소드는 다양한 분야에서 이용하기 때문에 여러 번 연습해두는게 좋음
'''

'''
1. format() 메소드
- format() 메소드는 print() 함수때 사용했습니다. ( Python2.x ) 버전

print() 함수 때 사용은 해봤으니깐, 정렬 옵션을 배워볼 것임.

format 정렬 옵션
1-1. < : 지정된 공간 내에서 '왼쪽' '정렬'합니다.
1-2. > : 지정된 공간 내에서 '오른쪽' '정렬'합니다.
1-3. ^ : 지정된 공간 내에서 '가운데' '정렬'합니다.
'''

# 예시 )
print("10자리 폭 왼쪽 정렬 '{:<10d}'".format(123))
print("10자리 폭 오른쪽 정렬 '{:>10d}'".format(123))
print("10자리 폭 중앙 정렬 '{:^10d}'".format(123))

# * 채우기
print("10자리 폭 왼쪽 정렬 '{:*<10d}'".format(123))
print("10자리 폭 오른쪽 정렬 '{:*>10d}'".format(123))
print("10자리 폭 중앙 정렬 '{:*^10d}'".format(123))

# python3.x ( S-format )
print(f"10자리 폭 왼쪽 정렬 '{123:<10}'")
print(f"10자리 폭 오른쪽 정렬 '{123:>10}'")
print(f"10자리 폭 중앙 정렬 '{123:^10}'")

# * 채우기
print(f"10자리 폭 왼쪽 정렬 '{123:*<10}'")
print(f"10자리 폭 오른쪽 정렬 '{123:*>10}'")
print(f"10자리 폭 중앙 정렬 '{123:*^10}'")

# '<', '>', '^'는 정렬 옵션이고, 10d는 10자리의 폭을 의미한다.
# 정렬 옵션 앞에 채움 '문자'를 지정하면 공백 대신 채움 문자가 빈자리를 채운다.

'''
2. count() 메소드
- '문자열 내부'에 '포함'된 '특정 문자열'의 '개수'를 '반환'하는 메소드!
'''

# 예시 )
s = '내가 그린 기린 그림은 목 긴 기린 그림이고, 네가 그린 기린 그림은 목 짧은 기린 그림이다.'
print(s.count('기린'))

# count() 메소드에 전달한 '기린'이 문자열 s에 총 4개 포함되어 있음을 의미함.
# 인덱스를 지정해서 검색 범위 지정도 가능해요 ( 음수 -도 가능 )

# 예시
s = 'best of best'
# b e s t ' ' o f ' ' b e s t   ( 문자 )
# 0 1 2 3  4  5 6  7  8 9 10 11 ( 인덱스 )
# -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 ( 음수로 표현 )
print(s.count('best'))
print(s.count('best', 5))
print(s.count('best', -7))

'''
3. find() 메소드
find() 메소드는 문자열 내부에 포함된 특정 문자열을 찾고자 할 때 사용함.
찾고자 하는 문자열이 있으면 그 문자열이 '처음 나오는 위치' '인덱스'를 '반환'함.
'''

s = "apple"
# 있는 단어
print(s.find('p'))

# 없는 단어
# 없는 단어는 -1을 반환해줌.
print(s.find('z'))

# count 메소드와 동일하게 인덱스를 이용해서 검색할 범위를 지정할 수 있음.
# 생략하면 처음 위치부터 찾고 입력하면 해당 입력한 인덱스부터 검색을 실행함.

# 예시 )
s = 'best of best'
# 처음 시작 ( 생략 )
print(s.find('best'))

# 5번 인덱스부터 시작
print(s.find('best', 5))

# find() 메소드와 찾는 방향이 다른 rfind() 메소드가 있음
# rfind = right + find ( 문자열 오른쪽 즉 뒤에서 부터 찾는다. )

print(s.rfind('best'))

'''
4. index() 메소드
index() 메소드는 find() 메소드와 같은 역할을 수행하고 사용 방법도 동일.
차이점은 찾는 문자열이 없을 때 발생 

find() -> 문자열이 없으면 -1을 반환 
index() -> 문자열이 없으면 Error를 반환 

왜??? find() 쓰면 되는데 index() 사용하냐??
-> 예외처리를 위해 사용 
'''
s = 'apple'
print(s.index('a'))
# print(s.index('z'))

'''
5. upper(), lower(), capitalize() **
- 영문의 대소문자를 변환해주는 메소드

5-1. upper : 입력이 된 문자열을 모두 대문자로 변환된 결과를 반환합니다.
5-2. lower : 입력이 된 문자열을 모두 소문자로 변환된 결과를 반환합니다.
5-3. capitalize : 입력이 된 문자열을 첫 글자는 대문자로 변환하고 
    나머지는 소문자로 변환한 결과를 반환 
'''

s = "BEST of best"
print(s.upper())
print(s.lower())
print(s.capitalize())

print('a' == 'A')
# 파이썬의 영문은 대소문자를 구분하기 때문에
# 모두 같은 단어로 인식할려면 대소문자 변환 메소드 처리 후
# 비교할려는 모든 단어를 통일시킨 뒤 처리하면됨.
# s = 'apple'
# s = 'APPLE'
# print(s)
# if s.lower() == 'apple':
#     print("돈을 내세요!")

'''
6. join() 메소드
join() 메소드는 인수로 전달한 반복가능객체(문자열, 리스트 등)의 각 요소 사이에
문자열을 포함시켜 새로운 문자열을 만들고 그 결과를 반환합니다.
'''

dates = ['2021', '07', '17']
# 2021-07-17
print(f'{dates[0]}-{dates[1]}-{dates[2]}')
print(f"{'-'.join(dates)}")
# 2021-07-17

# 6-1. 문자열과 join
print('-'.join('python')) # ['p','y','t','h','o','n']

# 6-2. 리스트와 join
print('-'.join(['a', 'b', 'c', 'd', 'f']))

# 공백을 넣어서 다 합쳐줄 수 있음.
print(''.join(['a', 'b', 'c', 'd', 'f']))

# 6.3 딕셔너리와 join ( key 값을 이용합니다. )
print('@'.join({'a': 'apple', 'b': 'banana'}))

'''
7. split() 메소드
split() 메소드는 하나의 문자열을 여러 개의 문자열로 분리해서 
저장한 리스트를 반환하는 메소드입니다.

기본적으로 공백 문자를 기준으로 분리.
* 사용자가 입력한 문자열 기준으로도 분리 가능
'''

# '공백' 기준 분리 ( 기본 값 )
s = 'Life is too short'
print(s.split())

# '특정 문자' 기준으로 분리
s = '010-1234-5678'
print(s.split('-'))

# CSV(comma Separated Values) : ','로 구분된 데이터 처리 
s = '제임스,25,남,서울'
print(s.split(','))

'''
8. replace() 메소드
replace() 메소드는 '문자열'의 '일부 문자열'을 '다른 문자열'로 '바꾼 결과'를 '반환'.
'''

s = 'Life is too short'
# short => long
print(s.replace('short', 'long'))

# 특정 문자열 제거
s = '010-1234-5678'
# 01012345678
print(s.replace('-', ''))

'''
9. lstrip, rstrip, strip 메소드
문자열의 양끝에 있는 불필요한 문자열을 제거하는 메소드.
불필요한 문자열 기본 = ' '
( 중간에 포함된 문자열은 제거 X )
'''

# 9-1 lstrip() = (left + strip) : 왼쪽 끝에 있는 불필요한 문자열을 제거한 결과를 반환
s = '               apple'
print(len(s))
print(s.lstrip())
print(len(s.lstrip()))

# 9-2 rstrip() = (rigth + strip) : 오른쪽 끝에 있는 불필요한 문자열을 제거한 결과를 반환
s = 'apple         '
print(len(s))
print(s.rstrip())
print(len(s.rstrip()))

# 9-3 strip() : 양쪽 끝에 있는 불필요한 문자열을 제거한 결과를 반환합니다.
s = '    apple    '
print(len(s))
print(s.strip())
print(len(s.strip()))

# 불필요한 문자열 제거
s = '<<<head'
print(s.strip('<'))

'''
책 예제 ) 다음은 주민등록번호에서 생년월일 6자리를 추출하는 프로그램입니다.
사용자로부터 하이픈(-)을 포함한 전체 주민등록번호를 입력받아 처리하는데,
만약 하이픈(-)의 위치가 올바르지 않다면 오류 메시지를 출력하고 다시 입력받도록
처리해보자.

출력 :
하이픈을 포함하여 전체 주민등록번호를 입력하세요 >>> 95121-1234567
하이픈의 위치가 잘못되었습니다.
하이픈을 포함하여 전체 주민등록번호를 입력하세요 >>> 951211-1234567
생년월일은 951211입니다.
'''

# while True:
#     p = input('하이픈을 포함하여 전체 주민등록번호를 입력하세요 >>>')
#     if p.find('-') == -1:
#         print('하이픈을 입력해주세요.')
#         continue
#     elif p.find('-') != 6:
#         print('하이픈의 위치가 잘못되었습니다.')
#         continue
#
#     birthday = p.split('-')[0]
#     print(f'생년월일은 {birthday}입니다.')
#     break

'''
예제 ) 사용자가 입력한 문자에 조건에 맞는 문자가 포함되어있으면 
*로 바꾸는 프로그램을 만드세요.

특정 문자 = ['ㅁ', 'a', 'b', 'c', 'dd', 'db' ]

아무 문자열을 입력해주세요 >>>ㅁsddkasdqwe
변환 ---> *s*k*sdqwe
'''

replace_str = ['ㅁ', 'a', 'b', 'c', 'dd', 'db' ]
a = 'ㅁsddkasdqwe'
for i in replace_str:
    a = a.replace(i, '*')

print(a)

'''
책 예제 ) 다음은 주민등록번호에서 뒷자리 6자리를 암호화하는 프로그램입니다.
사용자로부터 하이픈(-)을 포함한 전체 주민등록번호를 입력받아 처리하는데,
만약 하이픈(-)의 위치가 올바르지 않다면 오류 메시지를 출력하고 다시 입력받도록
처리하고, 올바르게 위치했다면 뒷자리 번호를 가려주어 출력해보자.

출력 :
하이픈을 포함하여 전체 주민등록번호를 입력하세요 >>> 95121-1234567
하이픈의 위치가 잘못되었습니다.
하이픈을 포함하여 전체 주민등록번호를 입력하세요 >>> 951211-1234567
951211-*******
'''

while True:
    p = input('하이픈을 포함하여 전체 주민등록번호를 입력하세요 >>>')
    if p.find('-') == -1:
        print('하이픈을 입력해주세요.')
        continue
    elif p.find('-') != 6:
        print('하이픈의 위치가 잘못되었습니다.')
        continue

    splits = p.split('-') # ['951211', '1234567']
    brithday = splits[0]
    data = ''
    for i in splits[1]:
        data += '*'
    print(f'{brithday}-{data}')
    break



