"""
파일명 : day05-03-loop4
개요 : 시퀀스와 for문
page : 119 ~ 125
"""

'''
1. for문과 문자열(str)을 사용하는 예시
'''
# ' '(스페이스)도 문자다!
for ch in 'Hello Python':
    print(ch)

'''
2. for문과 리스트 사용 예시
'''

for element in [1, 2, 3, 4, 5]:
    print(element)

'''
시퀀스(순서)를 가진 자료형에는 for문을 사용시 순서에 맞게 요소 하나하나를 꺼내줍니다.!!!
'''

'''
책 예시 ) 다음은 문자열 자료형의 비밀번호를 입력받아서 숫자와 문자가 모두 포함되어있는지
확인 후 모두 포함되어있으면 '가능한 비밀번호입니다'를 출력하고,
아니면 '불가능한 비밀번호입니다'를 출력하는 프로그램.

isalpha() : 문자열이 문자열인 경우 True를 반환.
isnumeric() : 문자열이 숫자인 경우 True를 반환.
* isdecimal() : 주어진 문자열이 int형으로 변환이 가능한지 알아내주는 함수  
                    - 특수문자 중 숫자모양을 숫자로 인식을 안함.
  isnumeric() : 숫자값 표현에 해당하는 문자열까지는 인정, 제곱근 및 분수 등
  isdigit()   : '숫자' 모양으로 생겼다면 True ( 숫자 형 글씨면 모든 ok )
'''

s = '3²'
s = '½'
#print(int(s))
print(s.isdecimal())
print(s.isnumeric())
print(s.isdigit())

# pwd = input('비밀번호를 입력하세요 >>>')
#
# ch_count = 0 # 문자열이 포함되어있을때 카운트
# num_count = 0 # 숫자가 포함되어있을때 카운트
# # abc345 => ch ['a', 'b', 'c' ... ]
# for ch in pwd:
#     if ch.isalpha(): # ch가 문자열(문자열)인 경우 True를 반환해주는 메소드입니다.
#         ch_count += 1
#     elif ch.isnumeric(): # ch가 숫자인 경우 True를 반환해주는 메소드입니다.
#         num_count += 1
#
# if ch_count > 0 and num_count > 0:
#     print('가능한 비밀번호입니다.')
# else:
#     print('불가능한 비밀번호입니다.')

'''
for문과 리스트
1. 리스트 순회
for문과 list를 활용하면 리스트의 각 요소를 순차적으로 하나씩 꺼내서
사용할 수 있습니다.
이를 '리스트 순회'라고 합니다.

리스트 순회의 기본 형식은 다음과 같습니다.
for 요소 in [리스트]:
    반복 실행문
'''

# 책 예시)
for item in ['가위', '바위', '보']:
    print(item)

'''
리스트 내포
리스트를 생성할 때 for문을 유용하게 사용할 수 있습니다.
리스트 내부에 for문을 포함하는 '리스트 내포'방식을 사용하면 리스트를 쉽게
생성할 수 있습니다.

리스트 내포 방식의 기본 형식은 다음과 같습니다.

리스트 = [ 표현식 for 변수 in 반복가능객체 ]
'''

# 책 예시 )
li = [n * 2 for n in [1, 2, 3]]

'''
조건을 만족하는 데이터만 추출할 수 있습니다.

리스트 = [ 표현식 for 변수 in 반복가능객체 if 조건식 ]

순서
1. 변수에 값을 담음
2. 변수가 조건문에 해당하는 확인
3. true -> 표현식 이용함.
3. false -> 지나감
'''

li = [n * 2 for n in [1, 2, 3, 4, 5] if n % 2 == 1]
print(li)

'''
for문과 튜플

for문과 튜플을 활용하면 튜플의 각 요소를 순차적으로 하나씩 꺼내서 사용할 수 있다.

enumerate() 함수를 사용하면 인덱스를 확인하면 for문을 진행할 수 있습니다.

for 문과 튜플을 함께 사용할때 기본 형식
for 요소 in (튜플):
    반복 실행문
'''

for k, v in enumerate([1, 2, 3, 4, 5]):
    if k == 1:
        print(v)

'''
for문과 range() 함수

range() 함수는 정수 범위를 만들어 낼 때 유용한 함수입니다.
for문과 range() 함수를 함께 사용하면 개발자가 원하는 범위의 값을 '쉽게'
생성할 수 있습니다.

range() 함수의 기본 구조
range(초깃값, 종료값, 증감값)

range()함수의 구성요소에 대한 특징
1. 초깃값부터 종료값 이전까지 숫자(n)들의 컬렉션을 만듭니다.
    ( 초깃값 <= n < 종료값 )
2. 초깃값을 생략하면 0부터 시작합니다.
3. 종료값은 생략할 수 없습니다.
4. 증감값을 생략하면 1씩 증가합니다. 
'''

# for i in range(1, 6):
#     print(i)

print(list(range(1, 6)))
print([1, 2, 3, 4, 5])

# range() 사용 이전
for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    print(i)

# range() 사용 후
for i in range(1, 11):
    print(i)

'''
for문을 사용하다 보면 range() 함수를 이용해서 생성한 값을 사용하지 않는 경우도 있습니다.
=> range가 생성해준 횟수만큼 for문을 돌고싶기 때문에.
'''

for i in range(10):
    print('Hello Python')